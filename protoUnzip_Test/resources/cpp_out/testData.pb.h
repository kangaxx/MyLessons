// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testData.proto

#ifndef PROTOBUF_testData_2eproto__INCLUDED
#define PROTOBUF_testData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace glx {
namespace cn {
namespace sh {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_testData_2eproto();
void protobuf_AssignDesc_testData_2eproto();
void protobuf_ShutdownFile_testData_2eproto();

class LogTag;
class Site;
class LogGroup;

// ===================================================================

class LogTag : public ::google::protobuf::Message {
 public:
  LogTag();
  virtual ~LogTag();

  LogTag(const LogTag& from);

  inline LogTag& operator=(const LogTag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogTag& default_instance();

  void Swap(LogTag* other);

  // implements Message ----------------------------------------------

  LogTag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogTag& from);
  void MergeFrom(const LogTag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required int32 Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:glx.cn.sh.LogTag)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_testData_2eproto();
  friend void protobuf_AssignDesc_testData_2eproto();
  friend void protobuf_ShutdownFile_testData_2eproto();

  void InitAsDefaultInstance();
  static LogTag* default_instance_;
};
// -------------------------------------------------------------------

class Site : public ::google::protobuf::Message {
 public:
  Site();
  virtual ~Site();

  Site(const Site& from);

  inline Site& operator=(const Site& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Site& default_instance();

  void Swap(Site* other);

  // implements Message ----------------------------------------------

  Site* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Site& from);
  void MergeFrom(const Site& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:glx.cn.sh.Site)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_testData_2eproto();
  friend void protobuf_AssignDesc_testData_2eproto();
  friend void protobuf_ShutdownFile_testData_2eproto();

  void InitAsDefaultInstance();
  static Site* default_instance_;
};
// -------------------------------------------------------------------

class LogGroup : public ::google::protobuf::Message {
 public:
  LogGroup();
  virtual ~LogGroup();

  LogGroup(const LogGroup& from);

  inline LogGroup& operator=(const LogGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogGroup& default_instance();

  void Swap(LogGroup* other);

  // implements Message ----------------------------------------------

  LogGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogGroup& from);
  void MergeFrom(const LogGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .glx.cn.sh.LogTag tags = 2;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 2;
  inline const ::glx::cn::sh::LogTag& tags(int index) const;
  inline ::glx::cn::sh::LogTag* mutable_tags(int index);
  inline ::glx::cn::sh::LogTag* add_tags();
  inline const ::google::protobuf::RepeatedPtrField< ::glx::cn::sh::LogTag >&
      tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::glx::cn::sh::LogTag >*
      mutable_tags();

  // repeated .glx.cn.sh.Site site = 3;
  inline int site_size() const;
  inline void clear_site();
  static const int kSiteFieldNumber = 3;
  inline const ::glx::cn::sh::Site& site(int index) const;
  inline ::glx::cn::sh::Site* mutable_site(int index);
  inline ::glx::cn::sh::Site* add_site();
  inline const ::google::protobuf::RepeatedPtrField< ::glx::cn::sh::Site >&
      site() const;
  inline ::google::protobuf::RepeatedPtrField< ::glx::cn::sh::Site >*
      mutable_site();

  // @@protoc_insertion_point(class_scope:glx.cn.sh.LogGroup)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::glx::cn::sh::LogTag > tags_;
  ::google::protobuf::RepeatedPtrField< ::glx::cn::sh::Site > site_;
  friend void  protobuf_AddDesc_testData_2eproto();
  friend void protobuf_AssignDesc_testData_2eproto();
  friend void protobuf_ShutdownFile_testData_2eproto();

  void InitAsDefaultInstance();
  static LogGroup* default_instance_;
};
// ===================================================================


// ===================================================================

// LogTag

// required int32 Key = 1;
inline bool LogTag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogTag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogTag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogTag::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 LogTag::key() const {
  // @@protoc_insertion_point(field_get:glx.cn.sh.LogTag.Key)
  return key_;
}
inline void LogTag::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:glx.cn.sh.LogTag.Key)
}

// required int32 Value = 2;
inline bool LogTag::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogTag::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogTag::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogTag::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 LogTag::value() const {
  // @@protoc_insertion_point(field_get:glx.cn.sh.LogTag.Value)
  return value_;
}
inline void LogTag::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:glx.cn.sh.LogTag.Value)
}

// -------------------------------------------------------------------

// Site

// required string name = 1;
inline bool Site::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Site::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Site::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Site::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Site::name() const {
  // @@protoc_insertion_point(field_get:glx.cn.sh.Site.name)
  return *name_;
}
inline void Site::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:glx.cn.sh.Site.name)
}
inline void Site::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:glx.cn.sh.Site.name)
}
inline void Site::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:glx.cn.sh.Site.name)
}
inline ::std::string* Site::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:glx.cn.sh.Site.name)
  return name_;
}
inline ::std::string* Site::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Site::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:glx.cn.sh.Site.name)
}

// required int32 id = 2;
inline bool Site::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Site::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Site::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Site::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Site::id() const {
  // @@protoc_insertion_point(field_get:glx.cn.sh.Site.id)
  return id_;
}
inline void Site::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:glx.cn.sh.Site.id)
}

// -------------------------------------------------------------------

// LogGroup

// optional string name = 1;
inline bool LogGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogGroup::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LogGroup::name() const {
  // @@protoc_insertion_point(field_get:glx.cn.sh.LogGroup.name)
  return *name_;
}
inline void LogGroup::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:glx.cn.sh.LogGroup.name)
}
inline void LogGroup::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:glx.cn.sh.LogGroup.name)
}
inline void LogGroup::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:glx.cn.sh.LogGroup.name)
}
inline ::std::string* LogGroup::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:glx.cn.sh.LogGroup.name)
  return name_;
}
inline ::std::string* LogGroup::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogGroup::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:glx.cn.sh.LogGroup.name)
}

// repeated .glx.cn.sh.LogTag tags = 2;
inline int LogGroup::tags_size() const {
  return tags_.size();
}
inline void LogGroup::clear_tags() {
  tags_.Clear();
}
inline const ::glx::cn::sh::LogTag& LogGroup::tags(int index) const {
  // @@protoc_insertion_point(field_get:glx.cn.sh.LogGroup.tags)
  return tags_.Get(index);
}
inline ::glx::cn::sh::LogTag* LogGroup::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:glx.cn.sh.LogGroup.tags)
  return tags_.Mutable(index);
}
inline ::glx::cn::sh::LogTag* LogGroup::add_tags() {
  // @@protoc_insertion_point(field_add:glx.cn.sh.LogGroup.tags)
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::glx::cn::sh::LogTag >&
LogGroup::tags() const {
  // @@protoc_insertion_point(field_list:glx.cn.sh.LogGroup.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::glx::cn::sh::LogTag >*
LogGroup::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:glx.cn.sh.LogGroup.tags)
  return &tags_;
}

// repeated .glx.cn.sh.Site site = 3;
inline int LogGroup::site_size() const {
  return site_.size();
}
inline void LogGroup::clear_site() {
  site_.Clear();
}
inline const ::glx::cn::sh::Site& LogGroup::site(int index) const {
  // @@protoc_insertion_point(field_get:glx.cn.sh.LogGroup.site)
  return site_.Get(index);
}
inline ::glx::cn::sh::Site* LogGroup::mutable_site(int index) {
  // @@protoc_insertion_point(field_mutable:glx.cn.sh.LogGroup.site)
  return site_.Mutable(index);
}
inline ::glx::cn::sh::Site* LogGroup::add_site() {
  // @@protoc_insertion_point(field_add:glx.cn.sh.LogGroup.site)
  return site_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::glx::cn::sh::Site >&
LogGroup::site() const {
  // @@protoc_insertion_point(field_list:glx.cn.sh.LogGroup.site)
  return site_;
}
inline ::google::protobuf::RepeatedPtrField< ::glx::cn::sh::Site >*
LogGroup::mutable_site() {
  // @@protoc_insertion_point(field_mutable_list:glx.cn.sh.LogGroup.site)
  return &site_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sh
}  // namespace cn
}  // namespace glx

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_testData_2eproto__INCLUDED
